1. Framework
> 웹 애플리케이션을 빠르게 개발할 수 있도록 도와주는 도구


2. Client / Server
> 서비스를 요청하는 주체 / 클라이언트의 요청에 응답하는 주체


3. 가상환경
> Python 애플리케이션과 그에 따른 패키지들을 격리하여 관리할 수 있는
독립적인 실행 환경
'''
$ python -m venv venv
$ source venv/Scripts/activate
(패키지 설치)
$ pip install django
(패키지 목록 생성)
$ pip freeze > requirements.txt
'''

- 가상환경을 사용하는 이유
  1) 의존성 관리 : 라이브러리 및 패키지를 각 프로젝트마다 독립적으로 사용 가능
   2) 팀 프로젝트 협업 : 모든 팀원이 동일한 환경과 의존성 위에서 작업하여 버전간 충돌을 방지


4. Django 프로젝트 생성 / 서버 실행 / 앱 생성
'''
$ django-admin startproject (pjt_name) .
$ python manage.py runserver
$ python manage.py startapp (app_name)
	-> (앱 등록) : settings.py -> INSTALLED_APPS 안에 추가
'''

- Django project : 애플리케이션의 집합(DB, URL, settings)
- Django application : 독립적으로 작동하는 기능 단위 모듈

5. LTS(long-term support)
> 프레임워크나 라이브러리 등의 소프트웨어에서 가장 장기간 지원되는 안정적인 버전을 의미


6. 디자인 패턴
> 소프트웨어 설계에서 발생하는 문제를 해결하기 위한 일반적인 해결책
> 독립적이고 쉽게 유지 보수할 수 있는 애플리케이션을 만들기 위함

- MVC 디자인 패턴(Model, View, Controller)
   : 애플리케이션을 구조화하는 대표적인 패턴
   : 데이터, 사용자 인터페이스, 비즈니스 로직을 분리

- MTV 디자인 패턴(Model, Template, View)
   : Django에서 애플리케이션을 구조화하는 패턴
 1) Model
	: 데이터와 관련된 로직을 관리
	: 응용프로그램의 데이터 구조를 정의하고 DB의 기록을 관리
 2) Template
	: 레이아웃과 화면을 처리
	: 화면상의 사용자 인터페이스 구조와 레이아웃을 정의
 3) View
	: Model & Template과 관련한 로직을 처리해서 응답을 반환
	: 클라이언트의 요청에 대해 처리를 분기하는 역할


7. URLs
 : [urls.py 파일] (http://127.0.0.1:8000/articles/)로 요청이 왔을 때, views 모듈의 index 뷰 함수를 호출
-> from (app_name) import views
-> path('articles/', views.index) 를 urlpatterns에 추가

8. View
 : [views.py 파일] 특정 경로에 있는 template과 request 객체를 결합해 응답 객체를 반환하는 index view 함수 정의
-> from django.shortcuts import render
-> def index(request):
	return render(request, 'articles/index.html')

- render 함수
> render(request, template_name, context)
 1) request : 응답을 생성하는 데 사용되는 요청 객체
 2) template_name : 템플릿 이름의 경로
 3) context : 템플릿에서 사용할 데이터(dictionary type)


9. Template
-> articles 앱 폴더 안에 templates 폴더 생성
(폴더명은 반드시 templates여야 하며 개발자가 직접 생성)
-> templates 폴더 안에 articles 폴더 생성
-> articles 폴더 안에 템플릿 파일 생성
 (index.html)

- Djanogo에서 template를 인식하는 경로 규칙
   : (app 폴더 / templates /) articles / index.html
	-> 괄호는 기본 경로로 인식하여 자동 생략


10. 데이터 흐름에 따른 코드 작성
   1) URLs(요청이 왔으니 views 모듈의 함수를 호출 / view 만들러 가기)
  2) View(template과 request를 결합하여 응답 / template 만들러 가기)
  3) Template(경로 설정 / html 제공)


11. Django Template system
> 데이터 표현을 제어하면서, 표현과 관련된 부분을 담당

- HTML의 콘텐츠를 변수 값에 따라 바꾸고 싶다면?
 1) 그 HTML을 호출하는 views.py 의 함수안에 context 안에 넣는다.
 -> context = {'name': 'Jane',}
 2) HTML 안에 DTL을 사용하여 표현
 -> Hello, {{ name }}
	처럼 변수를 중괄호 2개로 묶어서 표현


12. DTL(Django Template Language)
> Template에서 조건, 반복, 변수 등의 프로그래밍적 기능을 제공하는 시스템

 1) Variable(변수)
 : render 함수의 세번째 인자로 딕셔너리 데이터를 사용
 : 딕셔너리 key에 해당하는 문자열이 template에서 사용가능한 변수명이 됨
 : dot(.)를 사용하여 변수 속성에 접근할 수 있음
 -> {{ variable }}

 2) Filters
 : 표시할 변수를 수정할 때 사용
 : chained가 가능하며 일부 필터는 인자를 받기도 함
 : 약 60개의 built-in template filters를 제공
 -> {{ variable|filter }}

 3) Tags
 : 반복 또는 논리를 수행하여 제어 흐름을 만듦
 : 일부 태그는 시작과 종료 태그가 필요
 : 약 24 개의 built-in template tags를 제공
 -> {% tag %}
 -> {% if %} {% endif %}

 4) Comments
 : DTL에서의 주석


13. Template Inheritance(템플릿 상속)
> 페이지의 공통 요소를 포함하고, 하위 템플릿이 재정의할 수 있는 공간을 정의하는 기본 skeleton 템플릿을 작성하여 상속 구조를 구축

-> [skeleton 역할 템플릿 파일]에서 content라는 id로 공간을 확보 
{% block content %} {% endblock content %}
-> [상속 받을 하위 템플릿 파일]에서
{% extends (path_name) %}으로 상속 받고
{% block content %} {% endblock content %} 안에 내용 넣기


14. HTML form(요청과 응답)
 - 'form' element : 사용자로부터 할당된 데이터를 서버로 전송, 웹에서 사용자 정보를 입력하는 방식

    - 'action' & 'method' : form의 핵심 속성 2가지
        1) action
        : 입력 데이터가 전송될 URL을 지정(목적지)
        : 만약 이 속성을 지정하지 않으면 현재 form이 있는 페이지로 보냄
         2) method
	    : 데이터를 어떤 방식으로 보낼 것인지 정의
	    : 데이터의 HTTP request methods(GET, POST)를 지정

 - 'input' element : 사용자의 데이터를 입력 받을 수 있는 요소
    - 'name' attribute 
	    : 입력한 데이터에 붙이는 이름
	    : 데이터를 제출했을 때, 서버는 name 속성에 설정된 값을 통해서만
	    사용자가 입력한 데이터에 접근할 수 있음

      - Query String Parameters
	    : 사용자의 입력 데이터를 URL 주소에 파라미터를 통해 서버로 보내는 방법
	    : 문자열은 &로 연결된 key=value 쌍으로 구성되며, 기본 URL과는 ?로 구분
	    예시)http://host:port/path?key=value&key=value

 - HTTP request 객체 : form으로 전송한 데이터 뿐만 아니라 모든 요청 관련
                    데이터가 담겨있음(view함수의 첫번째 인자)

 - form 데이터를 가져오는 방법
 > request.GET.get('message')